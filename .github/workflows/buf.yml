name: Generate, Checking breaking change and Lint buf

on: push

env:
  GO_REPOSITORY: "protobuf-template-go"
  RELEASE_TAG: "test"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Buf Init
        uses: bufbuild/buf-setup-action@v1.9.0
        with:
          version: latest
      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
      - name: Buf Generate
        run: |
          export PATH="$PATH:$(go env GOPATH)/bin"
          buf generate
      - name: Init Go Module
        run: |
          cd gen/go
          go mod init github.com/infranyx/${{env.GO_REPOSITORY}}
          go mod tidy
          cd ../..
      - name: Pushes Generated Go Module
        uses: cpina/github-action-push-to-another-repository@v1.5.1
        env:
          # SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: "gen/go"
          destination-github-username: "infranyx"
          destination-repository-name: ${{env.GO_REPOSITORY}}
          target-branch: main
      - run: npm i semver@7.3.8 @octokit/rest@18.12.0
      - name: Create Golang Release
        uses: "actions/github-script@v5"
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          github-token: "${{ secrets.API_TOKEN_GITHUB }}"
          script: |
            const semver = require("semver");
            const { Octokit } = require("@octokit/rest");

            try{
                const { GO_REPOSITORY, API_TOKEN_GITHUB } = process.env
                const octokit = new Octokit({
                  auth: API_TOKEN_GITHUB,
                });
                const response = await octokit.rest.repos.listTags({
                    owner : context.repo.owner,
                    repo: GO_REPOSITORY,
                });
                console.log(response);
            }
            catch (error) {
                core.setFailed(error.message);
            }

#            try {
#              const { GO_REPOSITORY, RELEASE_TAG } = process.env
#              await github.rest.repos.createRelease({
#                // tag_name: RELEASE_TAG,
#                draft: false,
#                release_name: `Release ${github.ref}`,
#                generate_release_notes: true,
#                owner: context.repo.owner,
#                prerelease: false,
#                repo: GO_REPOSITORY,
#              });
#            } catch (error) {
#              core.setFailed(error.message);
#            }
